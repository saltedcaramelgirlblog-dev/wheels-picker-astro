<style>
.homebox {
  background-color: #1c1c1c;
  width: 400px;
    height: 480px;
  border: 1px solid #aea73b;
    border-radius: 8px;
  padding: 20px;
}
.homebox h3 {
    color: white;
    font-size: 1rem;
    text-transform: uppercase;
    margin: 0;
}
.homebox p {
    color: white;
    font-size: 14px;
}
/* Make the box a column layout so the list can scroll inside */
.homebox { display: flex; flex-direction: column; }

/* Buttons */
.actions-row { display: flex; gap: 8px; margin-top: 10px; }
.action-btn {
  height: 36px;
  border: none;
  padding: 0 12px;
  background: #f0ae5e;
  color: #212121;
  cursor: pointer;
}
.action-btn.secondary { background: #6e6e6e; color: #e3e3e3; }
.action-btn.primary { background: #f7b71e; color: #212121; }
.homebox-header { display: flex; align-items: center; justify-content: space-between; gap: 8px; margin-bottom: 14px; }
.homebox-header .actions-row { margin-top: 0; }

/* Badge and grid rows */
.yn-row { display: grid; grid-template-columns: repeat(2, minmax(0, 1fr)); gap: 8px; margin-top: 10px; }
.yn-row .action-btn { width: 100%; }
.yn-badge { display: inline-block; margin-left: 6px; background: #6e6e6e; color: #ffffff; border-radius: 6px; font-size: 12px; padding: 2px 6px; vertical-align: middle; }

/* Set selector */
.yn-sets-title { margin: 12px 0 6px; color: #e3e3e3; font-size: 14px; }
.yn-sets { display: grid; grid-template-columns: repeat(5, minmax(0,1fr)); gap: 8px; }
.yn-sets .action-btn { width: 100%; }

/* Counters */
.yn-counters { display: grid; grid-template-columns: repeat(3, minmax(0,1fr)); gap: 16px; margin-top: 16px; }
.yn-counter {
  height: 140px;
  border-radius: 18px;
  display: grid;
  place-items: center;
}
.yn-counter .num { font-size: 72px; font-weight: 900; line-height: 1; }
.yn-counter .label { margin-top: -6px; font-weight: 800; }

/* Specific styles to mirror the screenshots */
#yn-card-yes { background: #b3b246; }
#yn-card-maybe { background: #3f3f3f; }
#yn-card-no { background: #fff099; }

.hidden { display: none !important; }

/* Responsive */
@media (max-width: 1500px) { .homebox { width: min(90vw, 360px); height: auto; } }
@media (max-width: 768px) {
  .homebox { width: min(90vw, 340px); height: auto; padding: 16px; }
}
</style>

<div class="homebox yn-box">
  <div class="homebox-header">
    <h3>Inputs <span class="yn-badge" id="yn-count">0</span></h3>
  </div>

  <div class="yn-row">
    <button id="yn-mode-yn" type="button" class="action-btn primary">YES or NO</button>
    <button id="yn-mode-ynm" type="button" class="action-btn secondary">YES NO or MAYBE</button>
  </div>

  <div class="yn-sets-title">Number of Input Sets</div>
  <div class="yn-sets">
    <button data-set="1" type="button" class="action-btn secondary">1</button>
    <button data-set="2" type="button" class="action-btn secondary">2</button>
    <button data-set="3" type="button" class="action-btn secondary">3</button>
    <button data-set="4" type="button" class="action-btn primary">4</button>
    <button data-set="5" type="button" class="action-btn secondary">5</button>
  </div>

  <div id="yn-counters" class="yn-counters">
    <div id="yn-card-yes" class="yn-counter">
      <div class="num" id="yn-num-yes">0</div>
      <div class="label">YES</div>
    </div>
    <div id="yn-card-maybe" class="yn-counter">
      <div class="num" id="yn-num-maybe">0</div>
      <div class="label">MAYBE</div>
    </div>
    <div id="yn-card-no" class="yn-counter">
      <div class="num" id="yn-num-no">0</div>
      <div class="label">NO</div>
    </div>
  </div>
</div>

<script is:inline>
  (function initYesNoBox() {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initYesNoBox, { once: true });
      return;
    }

    const els = {
      count: document.getElementById('yn-count'),
      modeYN: document.getElementById('yn-mode-yn'),
      modeYNM: document.getElementById('yn-mode-ynm'),
      sets: Array.from(document.querySelectorAll('.yn-sets .action-btn')),
      cardYes: document.getElementById('yn-card-yes'),
      cardNo: document.getElementById('yn-card-no'),
      yesNum: document.getElementById('yn-num-yes'),
      noNum: document.getElementById('yn-num-no'),
      maybeNum: document.getElementById('yn-num-maybe'),
      cardMaybe: document.getElementById('yn-card-maybe'),
      countersGrid: document.getElementById('yn-counters'),
    };
    if (!els.count) return;

    let mode = 'yn'; // 'yn' | 'ynm'
    let sets = 4;
    let counts = { YES: 0, NO: 0, MAYBE: 0 };
    let palette = ["#4C5938", "#8A8C3E", "#F28C0F", "#F2790F", "#F2E0DC"]; // default to match wheel

    function getTextColor(bgHex) {
      if (!bgHex) return '#FFFFFF';
      const hex = bgHex.replace('#', '');
      const bigint = parseInt(hex.length === 3 ? hex.split('').map(c => c + c).join('') : hex, 16);
      const r = (bigint >> 16) & 255;
      const g = (bigint >> 8) & 255;
      const b = bigint & 255;
      const brightness = (r * 299 + g * 587 + b * 114) / 1000;
      return brightness > 180 ? '#333333' : '#FFFFFF';
    }

    function applyPalette(colors) {
      if (Array.isArray(colors) && colors.length) palette = colors.slice();
      const len = palette.length || 1;
      const yesBg = palette[0 % len];
      const maybeBg = palette[Math.min(2, len - 1) % len];
      const noBg = palette[Math.min(4, len - 1) % len];
      if (els.cardYes) {
        els.cardYes.style.background = yesBg;
        const c = getTextColor(yesBg);
        const num = els.cardYes.querySelector('.num');
        const label = els.cardYes.querySelector('.label');
        if (num) num.style.color = c;
        if (label) label.style.color = c;
      }
      if (els.cardMaybe) {
        els.cardMaybe.style.background = maybeBg;
        const c = getTextColor(maybeBg);
        const num = els.cardMaybe.querySelector('.num');
        const label = els.cardMaybe.querySelector('.label');
        if (num) num.style.color = c;
        if (label) label.style.color = c;
      }
      if (els.cardNo) {
        els.cardNo.style.background = noBg;
        const c = getTextColor(noBg);
        const num = els.cardNo.querySelector('.num');
        const label = els.cardNo.querySelector('.label');
        if (num) num.style.color = c;
        if (label) label.style.color = c;
      }
    }

    function setActive(primaryBtn, secondaryBtn) {
      primaryBtn.classList.add('primary');
      primaryBtn.classList.remove('secondary');
      secondaryBtn.classList.add('secondary');
      secondaryBtn.classList.remove('primary');
    }

    function setActiveSetButtons() {
      els.sets.forEach((btn) => {
        const n = Number(btn.getAttribute('data-set'));
        if (n === sets) {
          btn.classList.add('primary');
          btn.classList.remove('secondary');
        } else {
          btn.classList.add('secondary');
          btn.classList.remove('primary');
        }
      });
    }

    function compute() {
      const base = mode === 'yn' ? ['YES', 'NO'] : ['YES', 'MAYBE', 'NO'];
      const names = [];
      for (let i = 0; i < sets; i++) names.push(...base);
      if (els.count) els.count.textContent = String(names.length);
      window.dispatchEvent(new CustomEvent('wheel:updateNames', { detail: { names } }));
      // Adjust counters layout/visibility per mode
      if (els.countersGrid) {
        els.countersGrid.style.gridTemplateColumns = mode === 'yn' ? 'repeat(2, minmax(0,1fr))' : 'repeat(3, minmax(0,1fr))';
      }
      if (els.cardMaybe) {
        if (mode === 'yn') els.cardMaybe.classList.add('hidden'); else els.cardMaybe.classList.remove('hidden');
      }
    }

    function renderCounts() {
      if (els.yesNum) els.yesNum.textContent = String(counts.YES);
      if (els.noNum) els.noNum.textContent = String(counts.NO);
      if (els.maybeNum) els.maybeNum.textContent = String(counts.MAYBE);
    }
    function resetCounts() { counts = { YES: 0, NO: 0, MAYBE: 0 }; renderCounts(); }

    if (els.modeYN) els.modeYN.addEventListener('click', () => { mode = 'yn'; setActive(els.modeYN, els.modeYNM); resetCounts(); compute(); });
    if (els.modeYNM) els.modeYNM.addEventListener('click', () => { mode = 'ynm'; setActive(els.modeYNM, els.modeYN); resetCounts(); compute(); });

    els.sets.forEach((btn) => {
      btn.addEventListener('click', () => {
        const n = Number(btn.getAttribute('data-set'));
        if (Number.isFinite(n)) { sets = n; setActiveSetButtons(); resetCounts(); compute(); }
      });
    });

    // Listen for results from the wheel and increment counters
    window.addEventListener('wheel:result', (e) => {
      const label = (e && e.detail && String(e.detail.label || '')).trim().toUpperCase();
      if (label === 'YES') counts.YES++;
      else if (label === 'NO') counts.NO++;
      else if (label === 'MAYBE') counts.MAYBE++;
      renderCounts();
    });

    // Keep counters in sync with the current theme/palette used by the wheel
    window.addEventListener('wheel:updatePalette', (e) => {
      const incoming = (e && e.detail && Array.isArray(e.detail.colors)) ? e.detail.colors : null;
      if (incoming && incoming.length) applyPalette(incoming);
    });
    window.addEventListener('wheel:new', () => {
      applyPalette(["#4C5938", "#8A8C3E", "#F28C0F", "#F2790F", "#F2E0DC"]);
    });

    setActiveSetButtons();
    resetCounts();
    applyPalette(palette);
    compute();

    // If the wheel initializes after us, resend the current names so it can configure sectors
    window.addEventListener('wheel:ready', () => {
      const base = mode === 'yn' ? ['YES', 'NO'] : ['YES', 'MAYBE', 'NO'];
      const names = [];
      for (let i = 0; i < sets; i++) names.push(...base);
      window.dispatchEvent(new CustomEvent('wheel:updateNames', { detail: { names } }));
    }, { once: true });
  })();
</script>


